import type { Metadata } from "next";
import { Alex_Brush, Geist, Geist_Mono } from "next/font/google";
import localFont from "next/font/local";
import { cookies } from "next/headers";
import { getDictionary } from "./i18n/getDictionary";
import { TranslationsProvider } from "./i18n/TranslationsProvider";
import { Locale } from "./i18n/types";

import "react-datepicker/dist/react-datepicker.css";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const alexBrush = Alex_Brush({
  weight: "400",
  variable: "--font-alex-brush",
  subsets: ["latin"],
});

const circular = localFont({
  src: [
    {
      path: "../../public/fonts/CircularStd-Black.woff",
      style: "black",
      weight: "900",
    },
    {
      path: "../../public/fonts/CircularStd-Bold.woff",
      style: "bold",
      weight: "700",
    },
    {
      path: "../../public/fonts/CircularStd-Medium.woff",
      style: "medium",
      weight: "500",
    },
    {
      path: "../../public/fonts/CircularStd-Book.woff",
      style: "normal",
      weight: "400",
    },
  ],
  variable: "--font-circular",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();

  let locale: Locale = "en"; // default locale
  if (cookieStore.has("locale")) {
    const storedLocale = cookieStore.get("locale");
    if (storedLocale && typeof storedLocale.value === "string") {
      locale = storedLocale.value as Locale;
    }
  }

  const dictionary = await getDictionary(locale);

  return (
    <html lang="en">
      <body
        className={`${circular.variable} ${geistSans.variable} ${geistMono.variable} ${alexBrush.variable} antialiased`}
      >
        <TranslationsProvider dictionary={dictionary}>
          {children}
        </TranslationsProvider>
      </body>
    </html>
  );
}
